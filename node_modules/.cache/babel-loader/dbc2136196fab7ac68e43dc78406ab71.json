{"ast":null,"code":"import store from '../../config/store';\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from '../../config/constants';\nexport default function handleMovement(player) {\n  function getNewPosition(oldPosition, direction) {\n    switch (direction) {\n      case 'WEST':\n        return [oldPosition[0] - SPRITE_SIZE, oldPosition[1]];\n\n      case 'EAST':\n        return [oldPosition[0] + SPRITE_SIZE, oldPosition[1]];\n\n      case 'NORTH':\n        return [oldPosition[0], oldPosition[1] - SPRITE_SIZE];\n\n      case 'SOUTH':\n        return [oldPosition[0], oldPosition[1] + SPRITE_SIZE];\n\n      default:\n        return console.log('oi mate');\n    }\n  }\n\n  function observeBoundaries(oldPosition, newPosition) {\n    return newPosition[0] >= 0 && newPosition[0] <= MAP_WIDTH - SPRITE_SIZE && newPosition[1] >= 0 && newPosition[1] <= MAP_HEIGHT - SPRITE_SIZE;\n  }\n\n  function observeImpassable(oldPosition, newPosition) {\n    const tiles = store.getState().map.tiles;\n    const y = newPosition[1] / SPRITE_SIZE;\n    const x = newPosition[0] / SPRITE_SIZE;\n    const nextTile = tiles[y][x];\n    return nextTile < 5;\n  }\n\n  function observeLocation(oldPosition, newPosition) {\n    const tiles = store.getState().map.tiles;\n    const y = newPosition[1] / SPRITE_SIZE;\n    const x = newPosition[0] / SPRITE_SIZE;\n    const nextTile = tiles[y][x]; // switch(nextTile) {\n    //     case 10:\n    //         return console.log('oi mate its the dorm')\n    //     default:\n    //         return console.log(\"boo\")    \n    // }\n\n    return nextTile;\n  }\n\n  function dispatchMove(newPosition) {\n    store.dispatch({\n      type: 'MOVE_PLAYER',\n      payload: {\n        position: newPosition\n      }\n    });\n  }\n\n  function attemptMove(direction) {\n    const oldPosition = store.getState().player.position;\n    const newPosition = getNewPosition(oldPosition, direction);\n\n    if (observeBoundaries(oldPosition, newPosition) && observeImpassable(oldPosition, newPosition)) {\n      dispatchMove(newPosition);\n    }\n\n    switch (observeLocation(oldPosition, newPosition)) {\n      case 10:\n        console.log('oi mate its the dorm');\n        break;\n\n      case 11:\n        console.log('SHHHHHH ITS THE FUCKING LIBRARY');\n        break;\n\n      case 12:\n        console.log('SIG EP SIG EP');\n        break;\n\n      case 13:\n        console.log('get swol bruh');\n        break;\n\n      case 14:\n        console.log('num nums motherfucker');\n        break;\n\n      default:\n        return console.log(\"moving\");\n    }\n  }\n\n  function handleKeyDown(e) {\n    e.preventDefault();\n\n    switch (e.keyCode) {\n      case 37:\n        return attemptMove('WEST');\n\n      case 38:\n        return attemptMove('NORTH');\n\n      case 39:\n        return attemptMove('EAST');\n\n      case 40:\n        return attemptMove('SOUTH');\n\n      default:\n        console.log(e.keyCode);\n    }\n  }\n\n  window.addEventListener('keydown', e => {\n    handleKeyDown(e);\n  });\n  return player;\n}","map":{"version":3,"sources":["/Users/bethany/Desktop/basicRPG 2/basic-rpg/src/features/player/movement.js"],"names":["store","SPRITE_SIZE","MAP_WIDTH","MAP_HEIGHT","handleMovement","player","getNewPosition","oldPosition","direction","console","log","observeBoundaries","newPosition","observeImpassable","tiles","getState","map","y","x","nextTile","observeLocation","dispatchMove","dispatch","type","payload","position","attemptMove","handleKeyDown","e","preventDefault","keyCode","window","addEventListener"],"mappings":"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","sourcesContent":["import store from '../../config/store'\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from '../../config/constants'\n\nexport default function handleMovement(player) {\n\n    function getNewPosition(oldPosition, direction) {\n        switch (direction) {\n            case 'WEST':\n                return [oldPosition[0]-SPRITE_SIZE, oldPosition[1]]\n            case 'EAST':\n                return [oldPosition[0]+SPRITE_SIZE, oldPosition[1]]\n            case 'NORTH':\n                return [oldPosition[0], oldPosition[1]-SPRITE_SIZE]\n            case 'SOUTH':\n                return [oldPosition[0], oldPosition[1]+SPRITE_SIZE]\n            default:\n                return console.log('oi mate')\n        }\n\n    }\n\n    function observeBoundaries(oldPosition, newPosition)  {\n        return (newPosition[0] >= 0 && newPosition[0] <= MAP_WIDTH - SPRITE_SIZE) &&\n                (newPosition[1] >= 0 && newPosition[1] <= MAP_HEIGHT - SPRITE_SIZE)\n    }\n\n    function observeImpassable(oldPosition, newPosition){\n        const tiles = store.getState().map.tiles\n        const y = newPosition[1] / SPRITE_SIZE\n        const x = newPosition[0] / SPRITE_SIZE\n        const nextTile = tiles[y][x]\n        return nextTile < 5\n    }\n\n    function observeLocation (oldPosition, newPosition){\n        const tiles = store.getState().map.tiles\n        const y = newPosition[1] / SPRITE_SIZE\n        const x = newPosition[0] / SPRITE_SIZE\n        const nextTile = tiles[y][x]\n        // switch(nextTile) {\n        //     case 10:\n        //         return console.log('oi mate its the dorm')\n        //     default:\n        //         return console.log(\"boo\")    \n        // }\n        return nextTile; \n    }\n\n    function dispatchMove(newPosition) {\n        store.dispatch({\n            type: 'MOVE_PLAYER',\n            payload: {\n                position: newPosition\n            }\n        })\n    }\n\n    function attemptMove(direction){\n        const oldPosition = store.getState().player.position\n        const newPosition = getNewPosition(oldPosition, direction)\n        \n        if(observeBoundaries(oldPosition, newPosition) && observeImpassable(oldPosition, newPosition)){\n            dispatchMove(newPosition)\n        }\n        switch(observeLocation(oldPosition, newPosition)) {\n            case 10:\n                 console.log('oi mate its the dorm')\n                 break;\n            case 11:\n                 console.log('SHHHHHH ITS THE FUCKING LIBRARY')\n                 break;\n            case 12:\n                 console.log('SIG EP SIG EP')\n                 break;\n            case 13:\n                 console.log('get swol bruh')\n                 break;\n            case 14:\n                 console.log('num nums motherfucker')\n                 break;\n            default:\n                return console.log(\"moving\")    \n        }\n    }\n\n    function handleKeyDown(e) {\n        e.preventDefault()\n\n        switch(e.keyCode) {\n            case 37:\n                return attemptMove('WEST')\n            case 38:\n                return attemptMove('NORTH')\n            case 39:\n                return attemptMove('EAST')\n            case 40:\n                return attemptMove('SOUTH')\n            default:\n            console.log(e.keyCode)\n        }\n    }\n\n    window.addEventListener('keydown', (e) => {\n        handleKeyDown(e)\n    })\n\n    return player\n}"]},"metadata":{},"sourceType":"module"}