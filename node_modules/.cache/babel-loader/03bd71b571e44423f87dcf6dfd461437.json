{"ast":null,"code":"import _objectSpread from \"/Users/bethany/Desktop/basicRPG 2/basic-rpg/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/bethany/Desktop/basicRPG 2/basic-rpg/src/features/player/index.js\";\nimport React, { Component } from \"react\";\nimport walkSprite from \"./player_walk.png\";\nimport { connect } from \"react-redux\"; //import handleMovement from \"./movement\";\n\nimport store from \"../../config/store\";\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from \"../../config/constants\";\n\nclass Player extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: this.props.position[1],\n        left: this.props.position[0],\n        backgroundImage: \"url('\".concat(walkSprite, \"')\"),\n        backgroundPosition: \"0 0\",\n        width: \"40px\",\n        height: \"40px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return _objectSpread({}, state.player);\n}\n\nfunction handleMovement(Player) {\n  function getNewPosition(oldPosition, direction) {\n    switch (direction) {\n      case \"WEST\":\n        return [oldPosition[0] - SPRITE_SIZE, oldPosition[1]];\n\n      case \"EAST\":\n        return [oldPosition[0] + SPRITE_SIZE, oldPosition[1]];\n\n      case \"NORTH\":\n        return [oldPosition[0], oldPosition[1] - SPRITE_SIZE];\n\n      case \"SOUTH\":\n        return [oldPosition[0], oldPosition[1] + SPRITE_SIZE];\n\n      default:\n        return console.log(\"oi mate\");\n    }\n  }\n\n  function observeBoundaries(oldPosition, newPosition) {\n    return newPosition[0] >= 0 && newPosition[0] <= MAP_WIDTH - SPRITE_SIZE && newPosition[1] >= 0 && newPosition[1] <= MAP_HEIGHT - SPRITE_SIZE;\n  }\n\n  function observeImpassable(oldPosition, newPosition) {\n    const tiles = store.getState().map.tiles;\n    const y = newPosition[1] / SPRITE_SIZE;\n    const x = newPosition[0] / SPRITE_SIZE;\n    const nextTile = tiles[y][x];\n    return nextTile < 5;\n  }\n\n  function observeLocation(oldPosition, newPosition) {\n    const tiles = store.getState().map.tiles;\n    const y = newPosition[1] / SPRITE_SIZE;\n    const x = newPosition[0] / SPRITE_SIZE;\n    const nextTile = tiles[y][x]; // switch(nextTile) {\n    //     case 10:\n    //         return console.log('oi mate its the dorm')\n    //     default:\n    //         return console.log(\"boo\")\n    // }\n\n    return nextTile;\n  }\n\n  function dispatchMove(newPosition) {\n    store.dispatch({\n      type: \"MOVE_PLAYER\",\n      payload: {\n        position: newPosition\n      }\n    });\n  }\n\n  function attemptMove(direction) {\n    const oldPosition = store.getState().player.position;\n    const newPosition = getNewPosition(oldPosition, direction);\n\n    if (observeBoundaries(oldPosition, newPosition) && observeImpassable(oldPosition, newPosition)) {\n      dispatchMove(newPosition);\n    }\n\n    switch (observeLocation(oldPosition, newPosition)) {\n      case 10:\n        console.log(\"oi mate its the dorm\");\n        return this.props.history.push(\"/dorm\");\n      // break;\n\n      case 11:\n        console.log(\"SHHHHHH ITS THE FUCKING LIBRARY\");\n        break;\n\n      case 12:\n        console.log(\"SIG EP SIG EP\");\n        break;\n\n      case 13:\n        console.log(\"get swol bruh\");\n        break;\n\n      case 14:\n        console.log(\"num nums motherfucker\");\n        break;\n\n      default:\n        return console.log(\"moving\");\n    }\n  }\n\n  function handleKeyDown(e) {\n    e.preventDefault();\n\n    switch (e.keyCode) {\n      case 37:\n        return attemptMove(\"WEST\");\n\n      case 38:\n        return attemptMove(\"NORTH\");\n\n      case 39:\n        return attemptMove(\"EAST\");\n\n      case 40:\n        return attemptMove(\"SOUTH\");\n\n      default:\n        console.log(e.keyCode);\n    }\n  }\n\n  window.addEventListener(\"keydown\", e => {\n    handleKeyDown(e);\n  });\n}\n\nexport default connect(mapStateToProps)(handleMovement({\n  Player\n}));","map":{"version":3,"sources":["/Users/bethany/Desktop/basicRPG 2/basic-rpg/src/features/player/index.js"],"names":["React","Component","walkSprite","connect","store","SPRITE_SIZE","MAP_WIDTH","MAP_HEIGHT","Player","render","position","top","props","left","backgroundImage","backgroundPosition","width","height","mapStateToProps","state","player","handleMovement","getNewPosition","oldPosition","direction","console","log","observeBoundaries","newPosition","observeImpassable","tiles","getState","map","y","x","nextTile","observeLocation","dispatchMove","dispatch","type","payload","attemptMove","history","push","handleKeyDown","e","preventDefault","keyCode","window","addEventListener"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport walkSprite from \"./player_walk.png\";\nimport { connect } from \"react-redux\";\n//import handleMovement from \"./movement\";\nimport store from \"../../config/store\";\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from \"../../config/constants\";\n\nclass Player extends Component {\n  render() {\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          top: this.props.position[1],\n          left: this.props.position[0],\n          backgroundImage: `url('${walkSprite}')`,\n          backgroundPosition: \"0 0\",\n          width: \"40px\",\n          height: \"40px\"\n        }}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.player\n  };\n}\n\nfunction handleMovement(Player) {\n  function getNewPosition(oldPosition, direction) {\n    switch (direction) {\n      case \"WEST\":\n        return [oldPosition[0] - SPRITE_SIZE, oldPosition[1]];\n      case \"EAST\":\n        return [oldPosition[0] + SPRITE_SIZE, oldPosition[1]];\n      case \"NORTH\":\n        return [oldPosition[0], oldPosition[1] - SPRITE_SIZE];\n      case \"SOUTH\":\n        return [oldPosition[0], oldPosition[1] + SPRITE_SIZE];\n      default:\n        return console.log(\"oi mate\");\n    }\n  }\n\n  function observeBoundaries(oldPosition, newPosition) {\n    return (\n      newPosition[0] >= 0 &&\n      newPosition[0] <= MAP_WIDTH - SPRITE_SIZE &&\n      (newPosition[1] >= 0 && newPosition[1] <= MAP_HEIGHT - SPRITE_SIZE)\n    );\n  }\n\n  function observeImpassable(oldPosition, newPosition) {\n    const tiles = store.getState().map.tiles;\n    const y = newPosition[1] / SPRITE_SIZE;\n    const x = newPosition[0] / SPRITE_SIZE;\n    const nextTile = tiles[y][x];\n    return nextTile < 5;\n  }\n\n  function observeLocation(oldPosition, newPosition) {\n    const tiles = store.getState().map.tiles;\n    const y = newPosition[1] / SPRITE_SIZE;\n    const x = newPosition[0] / SPRITE_SIZE;\n    const nextTile = tiles[y][x];\n    // switch(nextTile) {\n    //     case 10:\n    //         return console.log('oi mate its the dorm')\n    //     default:\n    //         return console.log(\"boo\")\n    // }\n    return nextTile;\n  }\n\n  function dispatchMove(newPosition) {\n    store.dispatch({\n      type: \"MOVE_PLAYER\",\n      payload: {\n        position: newPosition\n      }\n    });\n  }\n\n  function attemptMove(direction) {\n    const oldPosition = store.getState().player.position;\n    const newPosition = getNewPosition(oldPosition, direction);\n\n    if (\n      observeBoundaries(oldPosition, newPosition) &&\n      observeImpassable(oldPosition, newPosition)\n    ) {\n      dispatchMove(newPosition);\n    }\n    switch (observeLocation(oldPosition, newPosition)) {\n      case 10:\n        console.log(\"oi mate its the dorm\");\n        return this.props.history.push(\"/dorm\");\n      // break;\n      case 11:\n        console.log(\"SHHHHHH ITS THE FUCKING LIBRARY\");\n        break;\n      case 12:\n        console.log(\"SIG EP SIG EP\");\n        break;\n      case 13:\n        console.log(\"get swol bruh\");\n        break;\n      case 14:\n        console.log(\"num nums motherfucker\");\n        break;\n      default:\n        return console.log(\"moving\");\n    }\n  }\n\n  function handleKeyDown(e) {\n    e.preventDefault();\n\n    switch (e.keyCode) {\n      case 37:\n        return attemptMove(\"WEST\");\n      case 38:\n        return attemptMove(\"NORTH\");\n      case 39:\n        return attemptMove(\"EAST\");\n      case 40:\n        return attemptMove(\"SOUTH\");\n      default:\n        console.log(e.keyCode);\n    }\n  }\n\n  window.addEventListener(\"keydown\", e => {\n    handleKeyDown(e);\n  });\n}\n\nexport default connect(mapStateToProps)(handleMovement({ Player }));\n"]},"metadata":{},"sourceType":"module"}